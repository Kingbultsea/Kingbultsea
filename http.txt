https://github.com/CyC2018/Interview-Notebook/blob/master/notes/HTTP.md
 学习时间 1小时 现在00点05分 
概念 web基础 wwwk的三种技术 HTML HTTP URL 
HTML 嗯   HTTP超文本传输协议 RFC（Request for comments 征求修正意见书）互联网的设计文档
URL --》 URI URL URN 目前WEB只有URL比较流行

二。请求和请求报文
1.请求报文  自行看图了
2.响应报文 自行图

三。HTTP方法 
GET 获取资源
HEAD 获取报文首部 和GET方法一样但是不返回报文实体主题部分  主要用于确认URL的有效性以及资源更新的日期时间等
POST 主要用于传输数据 而GET主要用来获取资源
PUT 上传文件 由于自身不带验证机制 任何人都可以上传文件 存在安全性问题 一般不用该方法
PATCH 对资源进行部分修改 
DELETE 删除文件 与PUT功能相反 并且同样不带验证机制 DELETE /file.html HTTP/1.1
OPTIONS 查询指定的URL能够支持的方法 会返回Allow:get post head options 这样的内容
CONNECT 要求用隧道协议连接代理
TRACE 追踪路径 发送请求的时候 在Max-Forwards首部字段中填入数值 每经过一个服务器就会减1 当数值为0的时候就停止传输 通常不会使用TRACE 并且他容易受到XST攻击（cross-site Tracing 跨站追踪）因此更不会去使用他

四。HTTP状态码
服务器返回的响应报文中第一行为状态行 包含了状态码以及原因短语 用来告知客户端请求的结果
1XX 信息性状态码     接收的请求正在处理 
2XX 成功状态码 请求处理完毕   （204 成功 但是返回的响应报文不包括含主题部分 就是不返回数据了）
3XX 重定向状态码 需要进行附加操作以完成请求（301 永久性 重定向 302临时性重定向 303采用了GET方法的302 307和302差不多  但是浏览器不会吧重定向请求的POST方法改成GET方法）
4XX 客户端错误   服务器无法处理请求（400报文语法错误  401需要有认证信息例如BASIC DIGEST认证 ）
5XX 服务器错误状态码  服务器处理请求出错（500 服务器正在执行请求的时候 发生错误 503服务器暂时处于超负载或正在进行停机维护 现在无法处理请求）

五。HTTP首部
通用首部字段
 Cache-Control 控制缓存的行为
 Connect 控制不再转发代理的首部字段 管理持久链接
 Date 创建报文的日期时间 
 Pragma 报文指令 
 Trailer报文末端的首部一览
 Transfer-Encoding 指定报文主体的传输编码方式 
 Upgrade 升级为其他协议 
 Via 代理服务器的县官信息 
 Warning 错误通知 
请求首部字段
 Accept 用户代理可处理的媒体类型
 Accept-Charset 优先的字符集
 Accept-Encoding 有限的内容编码
 Accept-Language 优先的语言
 Expect 期待服务器的特定行为
 From 用户的电子邮箱地址
 Host 请求资源所在服务器 
 If-Match 比较实体标记
 If-Modified-Since 比较资源的更新时间
 If-None-Match 比较实体标记
 Range 实体的字节范围请求
 Referer 对URI的原始获取方
 TE 传输编码的优先级
 User-Agent HTTP客户端程序的信息
响应首部字段 
 Accept-Ranges 是否接受字节范围请求
 Age 推算资源创建经过时间
 ETag 资源的匹配信息
 Location 令客户端重定向至指定的URI
 Proxy-Authenticate 代理服务器对客户端的认证信息
 Retry-After 对再次发起请求的时机要求
 Server HTTP服务器的安装信息
 Vary 代理服务器缓存的管理信息
 WWW-Authenticate 服务器对科幻段的认证信息
实体首部字段 
 Allow 资源可支持的HTTP方法
 Content-Encoding 实体主体使用的编码方式
 Content-Language 实体主体的自然语言
 Content-Location 替代对资源的URI
 Content-Type 实体主体的媒体类型
 Expires 实体主体过期的日期时间
 Last-Modified 资源的最后修改日期时间


六。具体应用
Cookie  HTTP/1.1才引入 来保存状态信息 例如保持用户的登陆状态
用途 会话状态管理（登陆 购物车 游戏分数 ）
     个性化设置（用户自定义的设置 主题）
      浏览器行为追踪（跟踪分析用户行为） Cookie 渐渐被淘汰。由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API （本地存储和会话存储）或 IndexedDB。
创建过程
 服务器假如发送了Cookie的话 响应报文包含Set-Cookie首部字段  客户端的带响应后把Cookie保存在浏览器中
分类 会话期Cookie：就是浏览器关闭之后就会被自动删除（虎牙的QQ登陆）
     持久性Cookie:指定一个特定的过期时间或者有效期<服务器自己搞对吧>
JS如何获取 ？
 document.cookie 也可以创建新的 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie<这个的意思是 不会干扰吧？嗯 就是我访问不了HttpOnly的cookie?>


 
 